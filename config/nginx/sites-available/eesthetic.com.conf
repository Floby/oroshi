# Redirect www subdomain to main domain
server {
	server_name www.eesthetic.com.dev;
	rewrite ^ $scheme://eesthetic.com.dev$uri permanent;
}

server {
	server_name eesthetic.com.dev;
	root        /var/www/websites/eesthetic.com/app/webroot;
	index       index.php;
	access_log  /usr/local/var/log/nginx/eesthetic.com.access.log;
	error_log   /usr/local/var/log/nginx/eesthetic.com.error.log;
	rewrite_log on;

	# Note:
	# Nginx location and rewrite rules are quite difficult to grasp at first.
	#
	# Nginx will first match the requested url against "location =" declarations.
	# Such declaration are for exact literal matches. If one matches, it will
	# apply the content of the block and stops. This is a hard rule.
	#
	# It will then look for "location ^~" declarations. Such declarations matches
	# when the requested url starts with the value of the location. No regexp
	# allowed. If one is found, it is applied and the parsing stops. This is
	# a hard rule.
	#
	# Now Nginx will look for all others rules. "location ~" is a regexp search,
	# while "location ~*" is its case-insensitive counterpart. simple "location"
	# declarations will be checked after the regexps. Whenever one
	# matches the requested url, the block content is applied. Block contents can
	# contain additional "rewrite" rules. If such rules ends with `break`, then
	# the parsing stops. If it ends with `last`, the parsing starts again from
	# the top using the new url. If no flag is used, it continue to the next
	# matching rule.
	# 
	
	# Deny access to hidden files
	location ~ /(\.ht|\.git|\.svn|\.hg) {
			deny all;
	}

	# Caching favicon
	location ~ ^/favicon.ico$ {
			access_log off;
			expires 1d;
			add_header Cache-Control public;
	}
	# Rewrite compressed css and js
	location ~ /(css|js)/packed_ {
		rewrite ^/(css|js)/packed_(.*)$ /$1/packed/$2 break;
	}

	# Send to fastcgi if php file
	location ~ \.php$ {
		fastcgi_pass   127.0.0.1:9000;
		fastcgi_index  index.php;
		fastcgi_intercept_errors on; # to support 404s for PHP files not found
		include        fastcgi_params;
	}

	# Catch any request not catched before.
	# Try the file on disk, otherwise dispatch to index.php
	location / {
		try_files $uri /index.php?url=$request_uri;
	}

}
