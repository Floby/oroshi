#!/usr/bin/env ruby
# Wrapper for pulling from remote
# Usage :
# $ git-remote-pull
# $ git-remote-pull upstream {current_branch}
# $ git-remote-pull {origin} develop
# $ git-remote-pull upstream develop

class GitRemotePull

  def initialize(*args)
    @flags = ['--rebase']
    @args = []

    # Split --flags and real options
    ARGV.each do |arg|
      if arg =~ /^-/
        @flags << arg
      else
        @args << arg
      end
    end

    # No args, default origin and default branch
    if @args.size == 0
      @remoteName = "origin"
      @branchName = current_branch
    end

    # Two args, both remote and branch
    if @args.size == 2
      @remoteName = @args[0]
      @branchName = @args[1]
    end

    # Only one args, it can either be a branch, or a remote
    if @args.size == 1
      if is_remote @args[0]
        @remoteName = @args[0]
        @branchName = current_branch
      else
        @remoteName = "origin"
        @branchName = @args[0]
      end
    end
  end

  def current_branch
    %x[git branch-current].strip
  end

  def is_remote(name)
    system("git remote-exists #{name}")
  end

  def run
    command_args=@flags
    command_args << @remoteName
    command_args << @branchName

    system("git pull #{command_args.join(' ')}")
    system("git fetch --tags #{@remoteName}")
    system("git submodule-update")
  end

end
GitRemotePull.new(*ARGV).run()
