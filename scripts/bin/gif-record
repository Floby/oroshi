#!/usr/bin/env zsh
# Record a part of the screen as an animated gif
# Main idea taken from:
# http://unix.stackexchange.com/questions/113695/gif-screencasting-the-unix-way

tmpDir="/tmp/gif_record"
framesDir="$tmpDir/frames"
pidFile="$tmpDir/pid"
aviFileTmp="$tmpDir/avi_tmp.avi"
aviFile="$tmpDir/avi.avi"
gifFile="$tmpDir/"`date +'%F_%Hh%Mm%S'`".gif"

mkdir -p "$tmpDir"
mkdir -p "$framesDir"

# If no script running, we start the recording
if [[ ! -r $pidFile ]]; then
  # Getting rectangle coords
  rectangle="$(xrectsel | sed 's/\+/ /')"
  dimensions="$(echo $rectangle | awk '{print $1}')"
  offset=$(echo $rectangle | awk '{print $2}' | sed 's/\+/,/')

  # Starting record
  ffmpeg -y \
         -f x11grab \
         -framerate 15 \
         -video_size $dimensions \
         -i :0.0+$offset \
         -codec:v huffyuv \
         -vf crop="iw-mod(iw\\,2):ih-mod(ih\\,2)" \
         $aviFileTmp \
         -t 60 \
         &>/dev/null \
         &!
  
  # Saving pid in file, so we can kill it later
  echo $! > $pidFile
  return
fi

# Stopping current record
pid="$(cat $pidFile)"
kill -9 $pid
rm $pidFile

# Copying the file (this will fix the duration metadata)
ffmpeg -y -i $aviFileTmp -c:v copy $aviFile &>/dev/null
duration=`video-duration $aviFile`
to=$(($duration - 2))

# Converting it to gif
echo "Converting to .gif (this could take some time)"
gifify $aviFile -o $gifFile --to=$to
eog $gifFile && geeqie $gifFile
