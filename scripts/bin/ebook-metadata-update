#!/usr/bin/env ruby
require 'shellwords'

# Guess ebook metadata from the filepath and write it to the file
class EbookMetadataWriter
  def initialize(*args)
    @inputs = sanitize_inputs(args)
  end

  # Keep only ebooks
  def sanitize_inputs(filenames)
    list = []
    filenames.each do |filename|
      filename = File.expand_path(filename)
      next unless File.exist?(filename)
      next unless ebook?(filename)
      list << filename
    end
    list
  end

  # We only work on mobi and epub files
  def ebook?(filepath)
    ['.epub', '.mobi'].include? File.extname(filepath).downcase
  end

  # Split a filepath into components of its basename
  def split_basename(filepath)
    File.basename(filepath, File.extname(filepath)).split(' - ')
  end

  # Extract various metadata and coalesce them in a hash
  def metadata(filepath)
    metadata = {}
    metadata.merge!(author(filepath))
    metadata.merge!(title(filepath))
    metadata.merge!(serie(filepath))
    metadata
  end

  # Extract serie name and index, if any
  def serie(filepath)
    splitted = split_basename(filepath)
    return {} unless splitted.size == 4
    {
      serie_name: splitted[1],
      serie_index: splitted[2]
    }
  end

  # Extract book title
  def title(filepath)
    splitted = split_basename(filepath)
    if splitted.size == 2
      title = splitted[1]
    else
      title = splitted[3..-1].join(' - ')
    end
    {
      title: title
    }
  end

  # Extract book author
  def author(filepath)
    author_full = split_basename(filepath)[0]
    firstname = author_full.split.last
    lastname = author_full.split[0...-1].join(' ')
    {
      author_lastname: lastname,
      author_firstname: firstname,
      author: author_full
    }
  end

  # Write metadata to file
  def write(filepath)
    extname = File.extname(filepath)
    options = write_options_mobi(filepath) if extname == '.mobi'
    options = write_options_epub(filepath) if extname == '.epub'

    # Default options
    options = [
      filepath.shellescape,
      "--book-producer=''",
      "--comments=''",
      "--publisher=''",
      "--tags=''",
      "--identifier isbn:''",
      "--identifier amazon:''"
    ] + options

    # Update cover if needed
    if cover?(filepath)
      cover = coverpath(filepath)
      optimize_cover(cover) if cover_need_optimize?(cover)
      options << "--cover=\"#{cover}\""
    end

    `ebook-meta #{options.join(' ')}`
  end

  # Commandline options for epub
  def write_options_epub(filepath)
    metadata = metadata(filepath)
    title = metadata[:title]
    firstname = metadata[:author_firstname]
    lastname = metadata[:author_lastname]

    options = [
      "--title=\"#{title}\""
    ]
    # Epub can have authors for display, and author-sort for ordering
    options << "--authors=\"#{firstname} #{lastname}\""
    options << "--author-sort=\"#{lastname}, #{firstname}\""

    # Add serie informations
    if metadata[:serie_name]
      serie_name = metadata[:serie_name]
      serie_index = metadata[:serie_index]
      options << "--series=\"#{serie_name}\""
      options << "--index=\"#{serie_index}\""
      options << "--title-sort=\"#{serie_name} - #{serie_index}\""
    end

    options
  end

  # Commandline options for mobi
  # Mobi on Paperwhite only use author and title to display books. So, in order
  # to have books grouped by serie, we need to put a lot of informations in
  # thoses fields.
  def write_options_mobi(filepath)
    metadata = metadata(filepath)
    title = metadata[:title]
    firstname = metadata[:author_firstname]
    lastname = metadata[:author_lastname]

    # The Kindle does not use the `author-sort`, so we need to set the author in
    # alphabetical order.
    author = "#{lastname} #{firstname}"

    # The Kindle also has no notion of series, so we'll hack it system and put
    # it in the author and title fields
    if metadata[:serie_name]
      author += " - #{metadata[:serie_name]}"
      title = "#{metadata[:serie_index]} - #{title}"
    end

    [
      "--authors=\"#{author}\"",
      "--title=\"#{title}\""
    ]
  end

  # Returns true if a file in same directory is a cover
  def cover?(filepath)
    File.exist?(coverpath(filepath))
  end

  # Gets the filepath of the coverfile
  def coverpath(filepath)
    extname = File.extname(filepath)
    filepath.gsub(/#{extname}$/, '.jpg')
  end

  # We guess that an image need optimization if it does not have the correct
  # dimension or is too heavy
  def cover_need_optimize?(coverpath)
    escaped_coverpath = coverpath.shellescape
    width = `identify -format "%w" #{escaped_coverpath}`.chomp.to_i
    filesize = `stat -c '%s' #{escaped_coverpath}`.chomp.to_i
    return true if width != 610
    return true if filesize > 200_000
    false
  end

  # Set the cover to the correct dimensions
  def optimize_cover(coverpath)
    puts 'Optimizing cover'
    `mogrify -resize 610 #{coverpath.shellescape}`
    `jpegoptim -m80 --strip-all #{coverpath.shellescape}`
  end

  def run
    @inputs.each do |input|
      puts "Updating #{File.basename(input)}"
      write(input)
    end
  end
end
EbookMetadataWriter.new(*ARGV).run
