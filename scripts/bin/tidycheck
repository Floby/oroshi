#!/usr/bin/env ruby
require 'fileutils'
require 'English'
require 'shellwords'
# This is a wrapper around tidy, to make it:
# - Only display the actual errors (not fixing anything)
# - Use a default set of options
# - Further hide errors that cannot be disabled through the options
class Tidy
  def initialize(*args)
    @input = File.expand_path(args.last)
    @tidycheckrc = File.expand_path('~/.tidycheckrc')

    unless File.exist?(@tidycheckrc)
      puts "Unable to find #{@tidycheckrc}"
      exit
    end

    options = [
      "-config #{@tidycheckrc}",
      '-e',
      '-utf8',
      '-o /dev/null',
      @input.shellescape
    ]

    @stderr = `tidy #{options.join(' ')} 2>&1`
    @exitcode = $CHILD_STATUS.exitstatus
  end

  # Remove useless errors from the list
  def get_errors(errors)
    list = errors.split("\n")
    list.reject! do |line|
      # See syntastic/syntax_checkers/html/tidy.vim for a more complete list
      # of errors that are safe to ignore
      next true if line.include?('is not approved by W3C')
      next true if line.include?('inserting implicit <body>')

      next true if line.include?('proprietary attribute "ng-')
      next true if line.include?('proprietary attribute "data-')

      # Presentation classes
      next true if line =~ /trimming empty/
    end

    return nil if list.empty?

    list.join("\n")
  end

  def run
    # Everything went well
    exit 0 if @exitcode == 0

    errors = get_errors(@stderr)
    exit 0 if errors.nil?

    puts errors
  end
end
Tidy.new(*ARGV).run
