#!/usr/bin/env ruby
require 'fileutils'
require 'shellwords'

# Will synchronize an ebook library repo to a device.
# Usage :
#  $ ebook-sync /path/to/source /path/to/destination (mobi|epub)
class EbookSync
  def initialize(*args)
    unless args.length == 3
      puts 'Usage:'
      puts '$ ebook-sync /src /dest ext'
      exit
    end

    @path_source = File.expand_path(args[0])
    @path_source += '/' unless @path_source[-1] == '/'

    @path_destination = File.expand_path(args[1])
    @path_destination += '/' unless @path_destination[-1] == '/'

    @filetype = args[2]

    unless File.exist?(@path_source)
      puts 'Source path does not exists'
      exit
    end

    FileUtils.mkdir_p(@path_destination) unless File.exist?(@path_destination)

    true
  end

  # Run the sync
  def run
    # Note: The synchronization will follow simple rules :
    #  - Only .@filetype files will be copied to a device
    #  - Files added/modified/deleted in the source will be updated in the
    #  destination
    #  - Files added/modified/deleted in the destination will NOT be updated in
    #  the source.

    puts '1/ Updating regular books between source and destination'
    rsync_dirs(@path_source, @path_destination, false)
    puts '2/ Manual syncing of directories with a trailing dot'
    sync_special_fat32_files
    puts '3/ Cleaning files on destination that are no longer on source'
    clean_deleted_files
  end

  def rsync_dirs(source, dest, delete = false)
    # Creating destination directory if non-existent
    FileUtils.mkdir_p(dest)

    # Notes :
    # Due to the nature of the fat32 system, we need to add the
    # --modify-window=1 to deal with the way timestamps are stored.
    # We also do not need to use the --archive flag as fat32 can't store
    # permissions, so we'll only use the implied --recursive flag.
    # We won't use the --time, but the --size-only instead. The Kindle seems to
    # update modification times whenever a books is viewed on the device.
    # Updating a book as a great probability of changing its size, so I think
    # --size-only is good enough.
    # We'll exlude our tmp/ folders from the sync
    # We'll also do not copy directories ending with a dot (.) as they will be
    # copied to the system without the dot, multiple rsync in a row will always
    # copy the files. Instead, we'll manually take care of them later.

    options = [
      '--verbose',
      '--recursive',
      '--size-only',
      '--modify-window=1',
      "--filter='-s tmp/'",
      "--filter='-s *./'", # Excluding directories with trailing dot
      "--filter='-s .git/'",
      "--filter='+s */'",
      "--filter='+s *.#{@filetype}'",
      "--filter='-s *'"
    ]
    options << '--delete' if delete

    options = options.join(' ')

    command = "rsync #{options} #{source.shellescape} #{dest.shellescape}"
    # Displaying files copied
    IO.popen(command).each do |line|
      line.chomp!
      next if line.size == 0
      next if line =~ %r{/$}
      next unless File.exist?(File.join(source, line))
      puts line.chomp
    end
  end

  # Given a file on source, returns the filepath on dest
  def get_dest_filepath(source)
    # If is a directory ending with a dot, we remove the dot
    source = source[0..-3] + '/' if source[-2..-1] == './'
    # We change the prefix from source to dest
    source.gsub!(@path_source, @path_destination)
    source
  end

  # Given a dest filepath, will return the source filepath
  def get_source_filepath(dest)
    dest.gsub(@path_destination, @path_source)
  end

  # Will manually find fat32 special dirs and sync them. This will delete out
  # of sync files in it.
  def sync_special_fat32_files
    Dir[File.join(@path_source, '**/*\./')].sort.each do |source_dir|
      # Syncing files from source and dest
      dest_dir = get_dest_filepath(source_dir)

      puts "Manually syncing files to #{File.basename(dest_dir)}"
      rsync_dirs(source_dir, dest_dir, true)
    end
  end

  # Check if a filepath is on one of the whitelisted directories
  def in_dir_whitelist?(file, whitelist)
    whitelist.each do |dir|
      return true if file[dir]
    end
    false
  end

  def clean_deleted_files
    # We'll look at every file on dest to delete those that are no longer on
    # source.
    dir_whitelist = [
      "#{@path_destination}.FBReader"
    ]
    kindle_extensions = %w(.sdr .mbs .mbp1)
    Dir[File.join(@path_destination, '**/{*,.*}')].sort.each do |dest_file|
      # Skip . and .. dirs
      basename = File.basename(dest_file)
      next if basename == '.' || basename == '..'

      # File on dest might have already been deleted
      next unless File.exist?(dest_file)
      # Same files exists on source
      next if File.exist?(get_source_filepath(dest_file))

      # Keep Kindle specific files on kindle
      next if kindle_extensions.include?(File.extname(dest_file))

      # We do not delete any files that is in a whitelisted directory
      next if in_dir_whitelist?(dest_file, dir_whitelist)

      # Some special handling if we're dealing with a directory
      if File.directory?(dest_file)
        # This directory does not exists on source, so we'll check with an
        # added trailing dot. If present, we keep it and its children (they
        # have been synced already before)
        source_file_with_dot = get_source_filepath(dest_file[0..-1] + './')
        if File.exist?(source_file_with_dot)
          dir_whitelist << dest_file
          next
        end
      end

      puts "Deleting #{dest_file}"
      if File.directory?(dest_file)
        FileUtils.rm_rf(dest_file)
      else
        FileUtils.rm(dest_file)
      end
    end
  end
end
EbookSync.new(*ARGV).run
