#!/usr/bin/env ruby
# encoding: utf-8
require "fileutils"
require "shellwords"
# Will copy all compressed photos to an external destination.
# Source must follow the convention :
# YYYY-MM-DD - Name of place/
#   YYYY–MM–DD/
#    compress/
#      compressed_file.jpg
#      compressed_file2.jpg
#      [...]
#    uncompressed_file.jpg
#    uncompressed_file2.jpg
#    [...]
#
# The destination will then be created in the following manner
# YYYY-MM-DD - Name of place
#  compressed_file.jpg
#  compressed_file2.jpg
#  [...]
#
#  Usage
#  $ photos-sync ~/Documents/Photos /media/BELETTE/Photos/Voyage


class PhotosSync

	def initialize(source, destination)
		@source = source
		@destination = destination

		unless File.exists?(source)
			puts "Unable to find #{@source}"
			exit
		end
		unless File.exists?(destination)
			puts "Unable to find #{@destination}"
			exit
		end
			
	end

	# Copy compressed files form source to dest
	def copy_compressed_files
		# Looping through each place
		Dir[File.join(@source, '*')].sort.each do |main_dir|
			main_dir = File.expand_path(main_dir)
			basename = File.basename(main_dir)

			next if basename == "tmp"
			next if basename == "Divers"
			next if basename == "Movies"
			next unless File.directory?(main_dir)

			# Creating such a dir on the receiving side if none exists
			dest_main_dir = File.join(@destination, basename)
			Dir.mkdir(dest_main_dir) unless File.exists?(dest_main_dir)

			# Now we copy each compressed file to this dir
			puts "# Copying files in #{basename}"
			Dir[File.join(main_dir, '*', 'compress', '*.JPG')].each do |file|
				dest_file = File.join(dest_main_dir, File.basename(file))
				FileUtils.copy(file, dest_file) unless File.exists?(dest_file)
			end
		end
	end

	# Copy files in tmp dir from source to dest
	def copy_tmp_files
		# We now copy all the tmp/ content
		dest_tmp = File.join(@destination, 'tmp')
		source_tmp = File.join(@source, 'tmp')

		# We remove all directories in dest ./tmp/ that do not exists in source
		puts "# Removing all useless directories in ./tmp"
		Dir[File.join(dest_tmp, '*')].each do |dest_tmp_subdir|
			dest_tmp_subdir = File.expand_path(dest_tmp_subdir)
			basename = File.basename(dest_tmp_subdir)

			source_tmp_subdir = File.join(source_tmp, basename)
			FileUtils.rm_rf(dest_tmp_subdir) unless File.exists?(source_tmp_subdir)
		end

		# We now copy all files from source ./tmp/*/compress/*.JPG into dest ./tmp/
		puts "# Copying all tmp/ subdirectories"
		Dir[File.join(source_tmp, '*')].each do |source_tmp_subdir|
			source_tmp_subdir = File.expand_path(source_tmp_subdir)
			basename = File.basename(source_tmp_subdir)

			# Creating tmp subdir
			dest_tmp_subdir = File.join(dest_tmp, basename)
			Dir.mkdir(dest_tmp_subdir) unless File.exists?(dest_tmp_subdir)

			# Copy all files in it
			Dir[File.join(source_tmp_subdir, 'compress', '*.JPG')].each do |file|
				dest_file = File.join(dest_tmp_subdir, File.basename(file))
				FileUtils.copy(file, dest_file) unless File.exists?(dest_file)
			end

		end

	end

	def run
		copy_compressed_files
		copy_tmp_files
	end

end

PhotosSync.new(*ARGV).run()
