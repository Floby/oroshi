#!/usr/bin/env ruby
# Encoding : UTF-8
require "shellwords"
# Some pdf files are only wrapper around raw image data. We can then easily
# extract them using pdfimages. Some other pdf are more nicely crafted and
# contains both text, decoration images and pdf custom data. For those, we need
# to simulate rendering it in a nice resolution, then converting the display as
# a jpg.

class Pdf2Jpg
  def initialize(*args)
    @files = args.map() { |file| File.expand_path(file) }
    @files.select!(){|file| File.exists?(file) && File.extname(file)==".pdf"}
  end

  # Will read the pdf metadata and extract all images saved in it.
  # This is useful when your pdf file is very simple and where each page is
  # simply an image file. If your pdf is too complex, it will result in a lot
  # of useless black and white .pbm files.
  def extract_all_images_from_pdf(pdf)
    basename = File.basename(pdf, File.extname(pdf))
    %x[pdfimages -j #{pdf.shellescape} "#{basename}"]
  end

  # Will render a pdf in a virtual viewport and output it to jpg
  # This is useful when your pdf is complex and you want to write it to a jpg
  # file the way it looks ont your computer.
  def render_all_pdf_pages_to_jpg(pdf)
    basename = File.basename(pdf, File.extname(pdf))
    output_format = "#{basename}-%03d.jpg"
    %x[convert -density 300 -quality 100 #{pdf.shellescape} "#{output_format}"]
  end

  # Check if a pdf file contains mask, meaning we'll need to render it before
  # extracting
  def has_mask?(pdf)
    output = %x[pdfimages -list #{pdf.shellescape}]
    return output =~ /mask/
  end

  def run
    @files.each do |file|
      if has_mask?(file)
        puts "Pdf contains masks. Output will use virtual rendering."
        render_all_pdf_pages_to_jpg(file)
      else
        puts "Pdf contains raw images. Extracting."
        extract_all_images_from_pdf(file)
      end
    end
  end
end
Pdf2Jpg.new(*ARGV).run()
