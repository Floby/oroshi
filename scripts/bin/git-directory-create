#!/usr/bin/env ruby
require 'fileutils'

# Creates a new repository, and plug it to github by default
# Usage :
# $ git-directory-create
# $ git-directory-create ./path/to/repo
class GitDirectoryCreate
  def initialize(*args)
    @path = File.expand_path(args[0] || '.')
    @name = File.basename(@path)
    @remote = args[1] || :github
  end

  def cd_to_repo
    # If the repo does not exists, we create the directory
    FileUtils.mkdir_p(File.join('.', @name))
    Dir.chdir(@path)
  end

  def init_repo
    # Stop if already a git repo
    if File.exist?(File.join(@path, '.git'))
      puts '✘ Directory is already a git repo'
      exit 1
    end

    # Init the repo
    `git init #{@path}`
    puts '✔ Local repository created'
    # Set a master branch
    if system('git checkout --quiet -b master')
      puts '✔ Branch master set as default'
    else
      puts '✘ Unable to create branch master'
      exit 1
    end
  end

  # Add default files
  def add_default_files
    # Add gitignore
    default_gitignore = File.expand_path('~/.oroshi/config/git/gitignore')
    if File.exist?(default_gitignore)
      FileUtils.cp(default_gitignore, './.gitignore')
    end

    # Add readme
    system("echo '# #{@name}\n' > README.md")

    system('git add .')
    system('git commit --quiet -m "Add .gitignore and README"')
    puts '✔ Default files added'
  end

  def create_remote
    return unless @remote == :github
    # Create github repo
    `gh repo -N #{@name} &>/dev/null`

    # Add remote
    if system("git remote add origin git@github.com:pixelastic/#{@name}")
      puts '✔ Remote origin set to GitHub'
    else
      puts '✘ Unable to set remote to GitHub'
      exit 1
    end
  end

  def push
    if system('git push --set-upstream origin master &>/dev/null')
      puts '✔ Pushed'
    else
      puts '✘ Unable to push'
      exit 1
    end
  end

  def run
    cd_to_repo
    init_repo
    add_default_files
    create_remote
    push

    system('gh repo --browser')
    puts '✔ Repository created and pushed to GitHub'
  end
end
GitDirectoryCreate.new(*ARGV).run
